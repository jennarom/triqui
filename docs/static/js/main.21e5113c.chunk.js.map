{"version":3,"sources":["index.js"],"names":["Square","value","onClick","className","Board","props","renderSquare","i","squares","FunctionalGame","useState","Array","fill","history","setHistory","stepNumber","setstepNumber","xIsNext","setxIsNext","localHistory","current","winner","calculateWinner","moves","map","step","move","desc","jumpTo","status","slice","length","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"oLAMMA,EAAS,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAEvB,OACE,wBACEC,UAAU,SACVD,QAASA,EAFX,SAGGD,KAODG,EAAQ,SAAAC,GAEZ,IAAMC,EAAe,SAACC,GACpB,OACE,cAACP,EAAD,CACEC,MAAOI,EAAMG,QAAQD,GACrBL,QAAS,kBAAMG,EAAMH,QAAQK,OAKjC,OACE,gCACE,sBAAKJ,UAAU,YAAf,UACGG,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKH,UAAU,YAAf,UACGG,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKH,UAAU,YAAf,UACGG,EAAa,GACbA,EAAa,GACbA,EAAa,UAOlBG,EAAiB,SAAAJ,GAErB,MAA8BK,mBAAS,CAAC,CAACF,QAASG,MAAM,GAAGC,KAAK,SAAhE,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAwBQC,EAAeN,EACfO,EAAUD,EAAaJ,GACvBM,EAASC,EAAgBF,EAAQZ,SAEjCe,EAAQJ,EAAaK,KAAI,SAACC,EAAMC,GACpC,IAAMC,EAAOD,EACX,eAAiBA,EACjB,mBACF,OACE,6BACE,wBAAQxB,QAAS,kBAjBX,SAACuB,GACbT,EAAcS,GACdP,EAAYO,EAAO,IAAO,GAeGG,CAAOF,IAA9B,SAAsCC,KAD/BD,MAMTG,EAAQ,GAOZ,OALEA,EADER,EACO,WAAaA,EAEb,iBAAmBJ,EAAU,IAAM,KAI5C,sBAAKd,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACC,EAAD,CACEI,QAAUY,EAAQZ,QAClBN,QAjDU,SAACK,GACnB,IAAMY,EAAeN,EAAQiB,MAAM,EAAGf,EAAa,GAE7CP,EADUW,EAAaA,EAAaY,OAAS,GAC3BvB,QAAQsB,QAE5BR,EAAgBd,IAAYA,EAAQD,KAGxCC,EAAQD,GAAKU,EAAU,IAAM,IAC7BH,EAAW,GAAD,mBAAKK,GAAL,CAAmB,CAAEX,cAC/BQ,EAAcG,EAAaY,QAC3Bb,GAAYD,SAyCR,sBAAKd,UAAU,YAAf,UACE,8BAAM0B,IACN,6BAAKN,WAcf,SAASD,EAAgBd,GAWvB,IAVA,IAAMwB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAzB,EAAI,EAAGA,EAAIyB,EAAMD,OAAQxB,IAAK,CACrC,kBAAkByB,EAAMzB,GAAxB,GAAO0B,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAI3B,EAAQyB,IAAMzB,EAAQyB,KAAOzB,EAAQ0B,IAAM1B,EAAQyB,KAAOzB,EAAQ2B,GACpE,OAAO3B,EAAQyB,GAGnB,OAAO,KAtBTG,IAASC,OACP,cAAC5B,EAAD,IACA6B,SAASC,eAAe,W","file":"static/js/main.21e5113c.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\n\n//cada cuadrado del tablero, son botones\nconst Square = ({ value, onClick }) => {\n\n  return (\n    <button\n      className=\"square\"\n      onClick={onClick}>\n      {value}\n    </button>\n  );\n\n}\n\n//tablero con identificador llamar al render\nconst Board = props=> {\n\n  const renderSquare = (i) => {\n    return (\n      <Square\n        value={props.squares[i]}\n        onClick={() => props.onClick(i)}\n      />\n    );\n  }\n \n    return (\n      <div>\n        <div className=\"board-row\">\n          {renderSquare(0)}\n          {renderSquare(1)}\n          {renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(3)}\n          {renderSquare(4)}\n          {renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(6)}\n          {renderSquare(7)}\n          {renderSquare(8)}\n        </div>\n      </div>\n    );\n}\n\n//tablero e historial de la clase\nconst FunctionalGame = props => {\n\n  const [history, setHistory] = useState([{squares: Array(9).fill(null)}]);\n  const [stepNumber, setstepNumber] = useState(0);\n  const [xIsNext, setxIsNext] = useState(true);\n  \n  const handleClick = (i) => {\n    const localHistory = history.slice(0, stepNumber + 1);\n    const current = localHistory[localHistory.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = xIsNext ? 'X' : 'O';\n    setHistory([...localHistory, { squares }]); \n    setstepNumber(localHistory.length);\n    setxIsNext(!xIsNext);\n      \n  }\n\n  const jumpTo= (step) => {\n    setstepNumber(step);\n    setxIsNext((step % 2) === 0);          \n  }\n\n  \n\n    const localHistory = history;\n    const current = localHistory[stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = localHistory.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status= '';\n    if (winner) {\n      status = 'Winner: ' + winner\n    } else {\n      status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={ current.squares }\n            onClick={ handleClick }\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  \n}\n\n// ========================================\n\nReactDOM.render(\n  <FunctionalGame />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}"],"sourceRoot":""}